//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

use super::{blockers, schedules};
use crate::{Blocker, Schedule, ScheduleLoadError};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "schedules")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    pub active: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::blockers::Entity")]
    Blockers,
}

impl Related<super::blockers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Blockers.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
    pub fn to_schedule(
        &self,
        blocker_data: &Vec<blockers::Model>,
    ) -> Result<Schedule, ScheduleLoadError> {
        let blockers: Result<Vec<Blocker>, ScheduleLoadError> = blocker_data
            .iter()
            .map(|blocker| blocker.to_blocker())
            .collect();

        let Ok(blockers) = blockers else {
            return Err(blockers.err().unwrap());
        };

        Ok(Schedule::new(
            self.id,
            &self.name,
            blockers,
            self.active == 1,
        ))
    }
}
